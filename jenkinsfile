pipeline {
    agent any

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'master', url: 'https://github.com/your-repo.git', credentialsId: 'your-credentials-id'
                sh 'git checkout 1.0.0'
            }
        }

        stage('Build & Restore NuGet Packages') {
            steps {
                tool name: 'dotnet', type: 'dotnet'
                withEnv(['PATH+DOTNET=${tool 'dotnet'}/bin']) {
                    sh 'dotnet build --configuration Release'
                    sh 'dotnet restore'
                }
            }
        }

        stage('Run Unit Tests') {
            steps {
                sh 'dotnet test' // Use the recommended test command for your test framework
            }
        }

        stage('Run Integration Tests') {
            // Include steps for your integration tests if applicable
        }

        stage('SonarQube Analysis') {
            steps {
                // Use the appropriate SonarQube plugin based on your setup
                // Configure credentials and server details as needed
                // You need to have the SonarQube Scanner installed on your Jenkins agent
                withSonarQubeEnv('SonarQube') {
                    sh 'dotnet sonarscanner begin /k:"your-project-key" /d:sonar.host.url="https://your-sonarqube-server" /d:sonar.login="your-sonarqube-token"'
                    sh 'dotnet build'
                    sh 'dotnet sonarscanner end /d:sonar.login="your-sonarqube-token"'
                }
            }
        }

        stage('Deploy to Production') {
            steps {
                // Define deployment steps based on your environment (e.g., AWS, Azure, on-premises)
                // Use appropriate tools and scripts like `dotnet publish`, `ssh`, or cloud-specific tooling
            }
        }
    }

    post {
        success {
            // Send notifications or perform other post-success tasks
        }
        failure {
            // Send notifications, collect logs, or perform other post-failure tasks
        }
    }
}